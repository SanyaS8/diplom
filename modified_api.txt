api/search_trips/
Описание: Поиск рейсов между двумя городами.
Метод: GET
Входные данные: Параметры запроса:
  - city1_name (string): Название города отправления.
  - country1_name (string): Страна города отправления.
  - city2_name (string): Название города прибытия.
  - country2_name (string): Страна города прибытия.
Выходные данные: JSON-массив объектов с информацией о рейсах:
  - trip_id (int): Идентификатор рейса.
  - departure_time (string): Время отправления.
  - arrival_time (string): Время прибытия.
  - distance_km (float): Расстояние в километрах.
  - base_price (float): Базовая стоимость билета.
  - status (string): Статус рейса (например, "active").
  - departure_city (string): Город отправления.
  - arrival_city (string): Город прибытия.
  - total_seats (int): Общее количество мест.
  - available_seats (int): Количество доступных мест.
  - model (string): Модель транспортного средства.
  - vehicle_number (string): Номер транспортного средства.
  - type (string): Тип транспортного средства (например, "Bus").
Пример успешного ответа:
[
    {
        "trip_id": 1,
        "departure_time": "2025-05-13T08:00:00",
        "arrival_time": "2025-05-13T12:00:00",
        "distance_km": 300.00,
        "base_price": 50.00,
        "status": "active",
        "departure_city": "Москва",
        "arrival_city": "Санкт-Петербург",
        "total_seats": 50,
        "available_seats": 20,
        "model": "Mercedes Sprinter",
        "vehicle_number": "AB123CD",
        "type": "Bus"
    }
]
Возможные ошибки:
  - 400: {"error": "All parameters (city1_name, country1_name, city2_name, country2_name) are required."}
  - 500: {"error": "Internal server error"}

MODIFIED: (разница между search_trips_* лишь в названии добавлена дата отправления)

api/search_trips_all/
Описание: Поиск всех рейсов между двумя городами.
Метод: GET
Входные данные: Параметры запроса:
  - city1_name (string): Название города отправления.
  - country1_name (string): Страна города отправления.
  - city2_name (string): Название города прибытия.
  - country2_name (string): Страна города прибытия.
  - departure_date (string): Дата отправления (в формате YYYY-MM-DD).
Выходные данные: JSON-массив объектов с информацией о рейсах:
  - trip_id (int): Идентификатор рейса.
  - departure_time (string): Время отправления.
  - arrival_time (string): Время прибытия.
  - distance_km (float): Расстояние в километрах.
  - base_price (float): Базовая стоимость билета.
  - status (string): Статус рейса (например, "active").
  - departure_city (string): Город отправления.
  - arrival_city (string): Город прибытия.
  - total_seats (int): Общее количество мест.
  - available_seats (int): Количество доступных мест.
  - model (string): Модель транспортного средства.
  - vehicle_number (string): Номер транспортного средства.
  - type (string): Тип транспортного средства (например, "Bus").
Пример успешного ответа:
[
    {
        "trip_id": 1,
        "departure_time": "2025-05-13T08:00:00",
        "arrival_time": "2025-05-13T12:00:00",
        "distance_km": 300.00,
        "base_price": 50.00,
        "status": "active",
        "departure_city": "Москва",
        "arrival_city": "Санкт-Петербург",
        "total_seats": 50,
        "available_seats": 20,
        "model": "Mercedes Sprinter",
        "vehicle_number": "AB123CD",
        "type": "Bus"
    }
]
Возможные ошибки:
  - 400: {"error": "All parameters (city1_name, country1_name, city2_name, country2_name, departure_date) are required."}
  - 500: {"error": "Internal server error"}


api/search_trips_airplane/
Описание: Поиск рейсов на самолете между двумя городами.
Метод: GET
Входные данные: Параметры запроса:
  - city1_name (string): Название города отправления.
  - country1_name (string): Страна города отправления.
  - city2_name (string): Название города прибытия.
  - country2_name (string): Страна города прибытия.
  - departure_date (string): Дата отправления (в формате YYYY-MM-DD).
Выходные данные: JSON-массив объектов с информацией о рейсах:
  - trip_id (int): Идентификатор рейса.
  - departure_time (string): Время отправления.
  - arrival_time (string): Время прибытия.
  - distance_km (float): Расстояние в километрах.
  - base_price (float): Базовая стоимость билета.
  - status (string): Статус рейса (например, "active").
  - departure_city (string): Город отправления.
  - arrival_city (string): Город прибытия.
  - total_seats (int): Общее количество мест.
  - available_seats (int): Количество доступных мест.
  - model (string): Модель транспортного средства.
  - vehicle_number (string): Номер транспортного средства.
  - type (string): Тип транспортного средства (например, "Airplane").
Пример успешного ответа:
[
    {
        "trip_id": 2,
        "departure_time": "2025-05-13T10:00:00",
        "arrival_time": "2025-05-13T14:00:00",
        "distance_km": 800.00,
        "base_price": 150.00,
        "status": "active",
        "departure_city": "Москва",
        "arrival_city": "Сочи",
        "total_seats": 200,
        "available_seats": 50,
        "model": "Boeing 737",
        "vehicle_number": "SU123",
        "type": "Airplane"
    }
]
Возможные ошибки:
  - 400: {"error": "All parameters (city1_name, country1_name, city2_name, country2_name, departure_date) are required."}
  - 500: {"error": "Internal server error"}


api/search_trips_train/
Описание: Поиск рейсов на поезде между двумя городами.
Метод: GET
Входные данные: Параметры запроса:
  - city1_name (string): Название города отправления.
  - country1_name (string): Страна города отправления.
  - city2_name (string): Название города прибытия.
  - country2_name (string): Страна города прибытия.
  - departure_date (string): Дата отправления (в формате YYYY-MM-DD).
Выходные данные: JSON-массив объектов с информацией о рейсах:
  - trip_id (int): Идентификатор рейса.
  - departure_time (string): Время отправления.
  - arrival_time (string): Время прибытия.
  - distance_km (float): Расстояние в километрах.
  - base_price (float): Базовая стоимость билета.
  - status (string): Статус рейса (например, "active").
  - departure_city (string): Город отправления.
  - arrival_city (string): Город прибытия.
  - total_seats (int): Общее количество мест.
  - available_seats (int): Количество доступных мест.
  - model (string): Модель транспортного средства.
  - vehicle_number (string): Номер транспортного средства.
  - type (string): Тип транспортного средства (например, "Train").
Пример успешного ответа:
[
    {
        "trip_id": 3,
        "departure_time": "2025-05-13T06:00:00",
        "arrival_time": "2025-05-13T12:00:00",
        "distance_km": 700.00,
        "base_price": 100.00,
        "status": "active",
        "departure_city": "Москва",
        "arrival_city": "Казань",
        "total_seats": 300,
        "available_seats": 100,
        "model": "Сапсан",
        "vehicle_number": "TR456",
        "type": "Train"
    }
]
Возможные ошибки:
  - 400: {"error": "All parameters (city1_name, country1_name, city2_name, country2_name, departure_date) are required."}
  - 500: {"error": "Internal server error"}


api/search_trips_bus/
Описание: Поиск рейсов на автобусе между двумя городами.
Метод: GET
Входные данные: Параметры запроса:
  - city1_name (string): Название города отправления.
  - country1_name (string): Страна города отправления.
  - city2_name (string): Название города прибытия.
  - country2_name (string): Страна города прибытия.
  - departure_date (string): Дата отправления (в формате YYYY-MM-DD).
Выходные данные: JSON-массив объектов с информацией о рейсах:
  - trip_id (int): Идентификатор рейса.
  - departure_time (string): Время отправления.
  - arrival_time (string): Время прибытия.
  - distance_km (float): Расстояние в километрах.
  - base_price (float): Базовая стоимость билета.
  - status (string): Статус рейса (например, "active").
  - departure_city (string): Город отправления.
  - arrival_city (string): Город прибытия.
  - total_seats (int): Общее количество мест.
  - available_seats (int): Количество доступных мест.
  - model (string): Модель транспортного средства.
  - vehicle_number (string): Номер транспортного средства.
  - type (string): Тип транспортного средства (например, "Bus").
Пример успешного ответа:
[
    {
        "trip_id": 4,
        "departure_time": "2025-05-13T08:00:00",
        "arrival_time": "2025-05-13T12:00:00",
        "distance_km": 300.00,
        "base_price": 50.00,
        "status": "active",
        "departure_city": "Москва",
        "arrival_city": "Санкт-Петербург",
        "total_seats": 50,
        "available_seats": 20,
        "model": "Mercedes Sprinter",
        "vehicle_number": "AB123CD",
        "type": "Bus"
    }
]
Возможные ошибки:
  - 400: {"error": "All parameters (city1_name, country1_name, city2_name, country2_name, departure_date) are required."}
  - 500: {"error": "Internal server error"}


api/admin/list-of-profiles/
Описание: Возвращает список всех профилей, отсортированных по ID.
Метод: GET
Входные данные: Нет.
Выходные данные: JSON-массив объектов с информацией о профилях:
  - profile_id (int): Идентификатор профиля.
  - full_name (string): Полное имя (ФИО).
  - phone (string): Номер телефона.
  - account_id (int): Идентификатор аккаунта.
Пример успешного ответа:
[
    {
        "profile_id": 1,
        "full_name": "Иван Иванов",
        "phone": "+79991234567",
        "account_id": 101
    },
    {
        "profile_id": 2,
        "full_name": "Петр Петров",
        "phone": "+79997654321",
        "account_id": 102
    }
]
Возможные ошибки:
  - 500: {"error": "Internal server error"}

api/admin/delete-profile/
Описание: Удаляет профиль по указанному ID.
Метод: DELETE
Входные данные: JSON с полями:
  - profile_id (int): Идентификатор профиля.
Выходные данные: JSON с сообщением об успешном удалении профиля.
Пример успешного ответа:
{
    "message": "Profile deleted successfully"
}
Возможные ошибки:
  - 400: {"error": "profile_id is required"}
  - 404: {"error": "Profile does not exist"}
  - 500: {"error": "Internal server error"}

api/admin/search-profile/
Описание: Поиск профиля по фамилии, имени или ID аккаунта.
Метод: GET
Входные данные: Параметры запроса (может быть указан любой из них):
  - last_name (string): Фамилия профиля.
  - first_name (string): Имя профиля.
  - account_id (int): ID аккаунта.
Выходные данные: JSON-массив объектов с информацией о профилях:
  - profile_id (int): Идентификатор профиля.
  - full_name (string): Полное имя (ФИО).
  - phone (string): Номер телефона.
  - account_id (int): Идентификатор аккаунта.
Пример успешного ответа:
[
    {
        "profile_id": 1,
        "full_name": "Иван Иванов",
        "phone": "+79991234567",
        "account_id": 101
    }
]
Возможные ошибки:
  - 400: {"error": "At least one parameter (last_name, first_name, account_id) is required."}
  - 500: {"error": "Internal server error"}

api/admin/list-of-tickets/
Описание: Возвращает список всех билетов.
Метод: GET
Входные данные: Нет.
Выходные данные: JSON-массив объектов с информацией о билетах:
  - ticket_id (int): Идентификатор билета.
  - profile_id (int): Идентификатор профиля.
  - trip_id (int): Идентификатор рейса.
  - seat_number (string): Номер места.
  - price (float): Стоимость билета.
  - status (string): Статус билета.
Пример успешного ответа:
[
    {
        "ticket_id": 1,
        "profile_id": 101,
        "trip_id": 202,
        "seat_number": "12A",
        "price": 1500.00,
        "status": "booked"
    }
]
Возможные ошибки:
  - 500: {"error": "Internal server error"}

api/admin/search-tickets/
Описание: Поиск билетов по ID профиля или рейса.
Метод: GET
Входные данные: Параметры запроса (может быть указан любой из них):
  - profile_id (int): Идентификатор профиля.
  - trip_id (int): Идентификатор рейса.
Выходные данные: JSON-массив объектов с информацией о билетах:
  - ticket_id (int): Идентификатор билета.
  - profile_id (int): Идентификатор профиля.
  - trip_id (int): Идентификатор рейса.
  - seat_number (string): Номер места.
  - price (float): Стоимость билета.
  - status (string): Статус билета.
Пример успешного ответа:
[
    {
        "ticket_id": 1,
        "profile_id": 101,
        "trip_id": 202,
        "seat_number": "12A",
        "price": 1500.00,
        "status": "booked"
    }
]
Возможные ошибки:
  - 400: {"error": "At least one parameter (profile_id, trip_id) is required."}
  - 500: {"error": "Internal server error"}

api/admin/search-users/
Описание: Поиск пользователей по фамилии, имени или ID.
Метод: GET
Входные данные: Параметры запроса (может быть указан любой из них):
  - last_name (string): Фамилия пользователя.
  - first_name (string): Имя пользователя.
  - user_id (int): ID пользователя.
Выходные данные: JSON-массив объектов с информацией о пользователях:
  - user_id (int): Идентификатор пользователя.
  - full_name (string): Полное имя (ФИО).
  - email (string): Электронная почта.
  - created_at (string): Дата создания аккаунта.
Пример успешного ответа:
[
    {
        "user_id": 1,
        "full_name": "Иван Иванов",
        "email": "ivan@example.com",
        "created_at": "2025-01-01T12:00:00"
    }
]
Возможные ошибки:
  - 400: {"error": "At least one parameter (last_name, first_name, user_id) is required."}
  - 500: {"error": "Internal server error"}

api/admin/search-trips/
Описание: Поиск рейсов по дате, перевозчику или маршруту.
Метод: GET
Входные данные: Параметры запроса (может быть указан любой из них):
  - date (string): Дата рейса (в формате YYYY-MM-DD).
  - carrier_id (int): Идентификатор перевозчика.
  - route_id (int): Идентификатор маршрута.
Выходные данные: JSON-массив объектов с информацией о рейсах:
  - trip_id (int): Идентификатор рейса.
  - departure_time (string): Время отправления.
  - arrival_time (string): Время прибытия.
  - base_price (float): Базовая стоимость билета.
  - status (string): Статус рейса.
  - distance_km (float): Расстояние в километрах.
  - route (object): Информация о маршруте:
    - departure_city (string): Город отправления.
    - arrival_city (string): Город прибытия.
  - vehicle (object): Информация о транспортном средстве:
    - type (string): Тип транспортного средства.
    - model (string): Модель транспортного средства.
    - vehicle_number (string): Номер транспортного средства.
Пример успешного ответа:
[
    {
        "trip_id": 1,
        "departure_time": "2025-05-13T08:00:00",
        "arrival_time": "2025-05-13T12:00:00",
        "base_price": 1500.00,
        "status": "active",
        "distance_km": 300.00,
        "route": {
            "departure_city": "Москва",
            "arrival_city": "Санкт-Петербург"
        },
        "vehicle": {
            "type": "Bus",
            "model": "Mercedes Sprinter",
            "vehicle_number": "AB123CD"
        }
    }
]
Возможные ошибки:
  - 400: {"error": "At least one parameter (date, carrier_id, route_id) is required."}
  - 500: {"error": "Internal server error"}

api/admin/search-carrier/
Описание: Поиск перевозчика по имени или ID.
Метод: GET
Входные данные: Параметры запроса (может быть указан любой из них):
  - name (string): Имя перевозчика.
  - carrier_id (int): Идентификатор перевозчика.
Выходные данные: JSON-массив объектов с информацией о перевозчиках:
  - carrier_id (int): Идентификатор перевозчика.
  - name (string): Имя перевозчика.
  - email (string): Электронная почта.
  - phone (string): Номер телефона.
Пример успешного ответа:
[
    {
        "carrier_id": 1,
        "name": "Перевозчик 1",
        "email": "carrier1@example.com",
        "phone": "+79991234567"
    }
]
Возможные ошибки:
  - 400: {"error": "At least one parameter (name, carrier_id) is required."}
  - 500: {"error": "Internal server error"}
